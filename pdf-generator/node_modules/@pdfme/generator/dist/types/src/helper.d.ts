import * as pdfLib from '@pdfme/pdf-lib';
import type { GeneratorOptions, Template, PDFRenderProps } from '@pdfme/common';
import type { Schema, Plugins } from '@pdfme/common';
import { PDFPage, PDFDocument, PDFEmbeddedPage } from '@pdfme/pdf-lib';
import { BasePdf } from '@pdfme/common';
import type { EmbedPdfBox } from './types';
export declare const getEmbeddedPagesAndEmbedPdfBoxes: (arg: {
    pdfDoc: PDFDocument;
    basePdf: BasePdf;
}) => Promise<{
    embeddedPages: pdfLib.PDFEmbeddedPage[];
    embedPdfBoxes: EmbedPdfBox[];
}>;
export declare const drawEmbeddedPage: (arg: {
    page: PDFPage;
    embeddedPage: PDFEmbeddedPage;
    embedPdfBox: EmbedPdfBox;
}) => void;
export declare const preprocessing: (arg: {
    template: Template;
    userPlugins: Plugins;
}) => Promise<{
    pdfDoc: pdfLib.PDFDocument;
    embeddedPages: pdfLib.PDFEmbeddedPage[];
    embedPdfBoxes: EmbedPdfBox[];
    renderObj: Record<string, (arg: PDFRenderProps<Schema>) => Promise<void> | void>;
    readOnlySchemaKeys: string[];
}>;
export declare const postProcessing: (props: {
    pdfDoc: pdfLib.PDFDocument;
    options: GeneratorOptions;
}) => void;
