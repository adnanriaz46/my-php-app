"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../../../src/index");
describe(`PDFCatalog`, () => {
    it(`can be constructed directly from a Map and PDFContext`, () => {
        const context = index_1.PDFContext.create();
        const dict = new Map();
        const catalog = index_1.PDFCatalog.fromMapWithContext(dict, context);
        expect(catalog).toBeInstanceOf(index_1.PDFCatalog);
        expect(catalog.get(index_1.PDFName.of('Type'))).toBeUndefined();
        expect(catalog.get(index_1.PDFName.of('Pages'))).toBeUndefined();
    });
    it(`is constructed with the correct Type and entries`, () => {
        const context = index_1.PDFContext.create();
        const pagesRef = index_1.PDFRef.of(21);
        const catalog = index_1.PDFCatalog.withContextAndPages(context, pagesRef);
        expect(catalog).toBeInstanceOf(index_1.PDFCatalog);
        expect(catalog.get(index_1.PDFName.of('Type'))).toBe(index_1.PDFName.of('Catalog'));
        expect(catalog.get(index_1.PDFName.of('Pages'))).toBe(pagesRef);
    });
    it(`returns its Pages entry value when it's a reference`, () => {
        const context = index_1.PDFContext.create();
        const pages = index_1.PDFDict.withContext(context);
        const pagesRef = context.register(pages);
        const catalog = index_1.PDFCatalog.withContextAndPages(context, pagesRef);
        expect(catalog.Pages()).toBe(pages);
    });
    it(`returns its Pages entry value when it's a direct object`, () => {
        const context = index_1.PDFContext.create();
        const pages = index_1.PDFPageTree.withContext(context);
        const catalog = index_1.PDFCatalog.withContextAndPages(context, pages);
        expect(catalog.Pages()).toBe(pages);
    });
    it(`can insert leaf nodes`, () => {
        const context = index_1.PDFContext.create();
        const pageTree1 = index_1.PDFPageTree.withContext(context);
        const pageTreeRef1 = context.register(pageTree1);
        const catalog = index_1.PDFCatalog.withContextAndPages(context, pageTreeRef1);
        const leaf1 = index_1.PDFPageLeaf.withContextAndParent(context, pageTreeRef1);
        const leafRef1 = context.register(leaf1);
        const leaf2 = index_1.PDFPageLeaf.withContextAndParent(context, pageTreeRef1);
        const leafRef2 = context.register(leaf2);
        pageTree1.pushLeafNode(leafRef1);
        pageTree1.pushLeafNode(leafRef2);
        expect(pageTree1.Count().asNumber()).toBe(2);
        expect(pageTree1.Kids().get(1)).toBe(leafRef2);
        expect(pageTree1.Kids().get(2)).toBe(undefined);
        const newLeaf = index_1.PDFPageLeaf.withContextAndParent(context, pageTreeRef1);
        const newLeafRef = context.register(newLeaf);
        const insertionRef = catalog.insertLeafNode(newLeafRef, 2);
        expect(pageTree1.Count().asNumber()).toBe(3);
        expect(insertionRef).toBe(pageTreeRef1);
        expect(pageTree1.Kids().get(1)).toBe(leafRef2);
        expect(pageTree1.Kids().get(2)).toBe(newLeafRef);
    });
    it(`can remove leaf nodes`, () => {
        const context = index_1.PDFContext.create();
        const pageTree1 = index_1.PDFPageTree.withContext(context);
        const pageTreeRef1 = context.register(pageTree1);
        const catalog = index_1.PDFCatalog.withContextAndPages(context, pageTreeRef1);
        const leaf1 = index_1.PDFPageLeaf.withContextAndParent(context, pageTreeRef1);
        const leafRef1 = context.register(leaf1);
        const leaf2 = index_1.PDFPageLeaf.withContextAndParent(context, pageTreeRef1);
        const leafRef2 = context.register(leaf2);
        pageTree1.pushLeafNode(leafRef1);
        pageTree1.pushLeafNode(leafRef2);
        expect(pageTree1.Count().asNumber()).toBe(2);
        expect(pageTree1.Kids().get(0)).toBe(leafRef1);
        expect(pageTree1.Kids().get(1)).toBe(leafRef2);
        catalog.removeLeafNode(1);
        expect(pageTree1.Count().asNumber()).toBe(1);
        expect(pageTree1.Kids().get(0)).toBe(leafRef1);
        expect(pageTree1.Kids().get(1)).toBe(undefined);
    });
});
//# sourceMappingURL=PDFCatalog.spec.js.map