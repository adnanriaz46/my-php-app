"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PDFName_1 = __importDefault(require("../objects/PDFName"));
const PDFAcroButton_1 = __importDefault(require("./PDFAcroButton"));
const errors_1 = require("../errors");
class PDFAcroCheckBox extends PDFAcroButton_1.default {
    setValue(value) {
        const onValue = this.getOnValue() ?? PDFName_1.default.of('Yes');
        if (value !== onValue && value !== PDFName_1.default.of('Off')) {
            throw new errors_1.InvalidAcroFieldValueError();
        }
        this.dict.set(PDFName_1.default.of('V'), value);
        const widgets = this.getWidgets();
        for (let idx = 0, len = widgets.length; idx < len; idx++) {
            const widget = widgets[idx];
            const state = widget.getOnValue() === value ? value : PDFName_1.default.of('Off');
            widget.setAppearanceState(state);
        }
    }
    getValue() {
        const v = this.V();
        if (v instanceof PDFName_1.default)
            return v;
        return PDFName_1.default.of('Off');
    }
    getOnValue() {
        const [widget] = this.getWidgets();
        return widget?.getOnValue();
    }
}
Object.defineProperty(PDFAcroCheckBox, "fromDict", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: (dict, ref) => new PDFAcroCheckBox(dict, ref)
});
Object.defineProperty(PDFAcroCheckBox, "create", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: (context) => {
        const dict = context.obj({
            FT: 'Btn',
            Kids: [],
        });
        const ref = context.register(dict);
        return new PDFAcroCheckBox(dict, ref);
    }
});
exports.default = PDFAcroCheckBox;
//# sourceMappingURL=PDFAcroCheckBox.js.map